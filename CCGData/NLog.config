<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="true"
      internalLogLevel="Warn" internalLogFile="c:\temp\nlog-internal.log">

  <!-- optional, add some variables
  https://github.com/nlog/NLog/wiki/Configuration-file#variables
  -->
  <variable name="myvar" value="myvalue"/>

  <extensions>
    <add assembly="NLog.Extensions" />
  </extensions>

  <!--
  See https://github.com/nlog/nlog/wiki/Configuration-file
  for information on customizing logging rules and outputs.
   -->
  <!--connectionStringName="NLogConn"-->
  <!--<parameter name="@siteName"       layout="${iis-site-name}" />-->
  <!--<parameter name="@username"       layout="${aspnet-user-identity}" />-->

  <!--<parameter name="@machineName"    layout="${machinename}" />
  <parameter name="@logged"         layout="${date}" />
  <parameter name="@level"          layout="${level}" />

  <parameter name="@message"        layout="${message}" />
  <parameter name="@logger"         layout="${logger}" />
  <parameter name="@properties"     layout="${all-event-properties:separator=|}" />
  <parameter name="@serverName"     layout="${aspnet-request:serverVariable=SERVER_NAME}" />
  <parameter name="@port"           layout="${aspnet-request:serverVariable=SERVER_PORT}" />
  <parameter name="@url"            layout="${aspnet-request:serverVariable=HTTP_URL}" />
  <parameter name="@https"          layout="${when:inner=1:when='${aspnet-request:serverVariable=HTTPS}' == 'on'}${when:inner=0:when='${aspnet-request:serverVariable=HTTPS}' != 'on'}" />
  <parameter name="@serverAddress"  layout="${aspnet-request:serverVariable=LOCAL_ADDR}" />
  <parameter name="@remoteAddress"  layout="${aspnet-request:serverVariable=REMOTE_ADDR}:${aspnet-request:serverVariable=REMOTE_PORT}" />
  <parameter name="@callSite"       layout="${callsite}" />
  <parameter name="@exception"      layout="${exception:tostring}" />-->
  <!--commandText="[dbo].[NLog_AddEntry_p]">-->

  <!--<parameter name="@UserName" layout="${aspnet-user-identity}"-->
  <targets>
    <target name="logfile" xsi:type="File" fileName="C:\Logs\file.txt"     layout="${longdate} ${message} ${exception:format=tostring}"/>
    <target name="logconsole" xsi:type="Console" />

    <!--connectionString="data source=NIASOFF-DESKTOP\SQLSERVER2017;initial catalog=SC;user id=WebUser;password=123;"-->
    <target name="database" xsi:type="Database" keepConnection="true" useTransactions="true"
       dbProvider="System.Data.SqlClient"
     connectionString="data source=ccgdbserver.database.windows.net;initial catalog=CCGData2;user id=bniasoff;password=CCG123!b;"
       commandText="INSERT INTO Errors(EventDateTime, EventLevel,  MachineName, EventMessage, ErrorSource, ErrorClass, ErrorMethod,ErrorLinenumber, Stacktrace, InnerErrorMessage) VALUES (@EventDateTime, @EventLevel,  @MachineName, @EventMessage, @ErrorSource, @ErrorClass, @ErrorMethod, @ErrorLinenumber,@Stacktrace, @InnerErrorMessage)">

      <!-- parameters for the command -->
      <parameter name="@EventDateTime" layout="${date:s}" />
      <parameter name="@EventLevel" layout="${level}" />>
      <parameter name="@MachineName" layout="${machinename}" />
      <parameter name="@EventMessage" layout="${message}" />
      <parameter name="@ErrorSource" layout="${identity}" />
      <parameter name="@ErrorClass" layout="${callsite}" />
      <parameter name="@ErrorMethod" layout="${aspnet-mvc-controller},${aspnet-mvc-action}" />
      <parameter name="@ErrorLinenumber" layout="${callsite-linenumber:Integer}" />
      <parameter name="@Stacktrace" layout="${stacktrace}" />
      <parameter name="@InnerErrorMessage"  layout="${exception:format=toString,Data:maxInnerExceptionLevel=10}" />
    </target>

    <!--${exception:format=String:innerFormat=String:maxInnerExceptionLevel=Integer:innerExceptionSeparator=String:separator=String:exceptionDataSeparator=string}-->

    <!--
    add your targets here
    See https://github.com/nlog/NLog/wiki/Targets for possible targets.
    See https://github.com/nlog/NLog/wiki/Layout-Renderers for the possible layout renderers.
    -->

    <!--
    Write events to a file with the date in the filename.
    <target xsi:type="File" name="f" fileName="${basedir}/logs/${shortdate}.log"
            layout="${longdate} ${uppercase:${level}} ${message}" />
    -->
  </targets>


  <rules>
    <logger name="*" minlevel="Info" writeTo="logconsole" />
    <logger name="*" minlevel="Debug" writeTo="database" />
    <logger name="*" minlevel="Debug" writeTo="logfile" />

    <!--<logger name="*" minlevel="Debug" writeTo="database">
      <filters>
        <when condition="length('${message}') > 100" action="Ignore" />
        <when condition="equals('${logger}','MyApps.SomeClass')" action="Ignore" />
        <when condition="(level >= LogLevel.Debug and contains('${message}','PleaseDontLogThis')) or level==LogLevel.Warn" action="Ignore" />
        <when condition="not starts-with('${message}','PleaseLogThis')" action="Ignore" />
      </filters>
    </logger>
    
    <logger name="*" minlevel="Debug" writeTo="logfile">
      <filters>
        <when condition="length('${message}') > 100" action="Ignore" />
        <when condition="equals('${logger}','MyApps.SomeClass')" action="Ignore" />
        <when condition="(level >= LogLevel.Debug and contains('${message}','PleaseDontLogThis')) or level==LogLevel.Warn" action="Ignore" />
        <when condition="not starts-with('${message}','PleaseLogThis')" action="Ignore" />
      </filters>
    </logger>-->


    <!-- add your logging rules here -->

    <!--
    Write all events with minimal level of Debug (So Debug, Info, Warn, Error and Fatal, but not Trace)  to "f"
    <logger name="*" minlevel="Debug" writeTo="f" />
    -->
  </rules>
</nlog>